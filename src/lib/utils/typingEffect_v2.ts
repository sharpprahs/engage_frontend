// low fps
import { writable, type Writable } from "svelte/store";
import { onMount, onDestroy } from "svelte";

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –æ–ø—Ü–∏–π
interface TypingEffectOptions {
	text: string;
	typingSpeed: number;
	deletingSpeed: number;
	pauseBetweenCycles: number;
}
// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏ —Å –≤—ã—Å–æ–∫–æ–π –ø–ª–∞–≤–Ω–æ—Å—Ç—å—é FPS
export function useTypingEffect({
																	text,
																	typingSpeed = 90,
																	deletingSpeed = 50,
																	pauseBetweenCycles = 2000
																}: TypingEffectOptions) {
	// –†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
	const statusText: Writable<string> = writable("");
	const showCursor: Writable<boolean> = writable(true);

	let index = 0;
	let deleting = false;
	let cursorInterval: ReturnType<typeof setInterval> | undefined;
	let typingTimeout: ReturnType<typeof setTimeout> | undefined;

	// üîÑ –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç `requestAnimationFrame`)
	function typeAndDelete() {
		typingTimeout = setTimeout(() => {
			if (!deleting) {
				// –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–∫—Å—Ç
				if (index < text.length) {
					statusText.set(text.slice(0, index + 1));
					index++;
					typeAndDelete();
				} else {
					// –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
					setTimeout(() => {
						deleting = true;
						typeAndDelete();
					}, pauseBetweenCycles);
				}
			} else {
				// –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç
				if (index > 0) {
					statusText.set(text.slice(0, index - 1));
					index--;
					typeAndDelete();
				} else {
					// –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
					deleting = false;
					typeAndDelete();
				}
			}
		}, deleting ? deletingSpeed : typingSpeed);
	}

	// ‚ú® –ú–∏–≥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ (—Ä–∞–∑ –≤ 500–º—Å)
	function blinkCursor() {
		cursorInterval = setInterval(() => {
			showCursor.update(c => !c);
		}, 500);
	}

	// ‚ñ∂ –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	onMount(() => {
		typeAndDelete();
		blinkCursor();
	});

	// üõë –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–≤–∞–∂–Ω–æ!)
	onDestroy(() => {
		if (cursorInterval) clearInterval(cursorInterval);
		if (typingTimeout) clearTimeout(typingTimeout);
	});

	return { statusText, showCursor };
}
